{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf430
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0\fs24 \cf0 database\
Per ottenere un clustering "verosimile" e vedere dei risultati, devo fare un database che rappresenti tutti gli url visitati finora con i tag corrispondenti, per costruire i tagtfidf e successivamente clusterizzarli e vedere cosa esce fuori. \
\'c9 necessario anche un metodo per visualizzare i cluster (un elenco di cluster). \
\
Il database che contiene i dati utili alla costruzione degli oggetti Tagtfidf deve essere fatto cos\'ed: \
\
\
Gi\'e1 esiste un saveVisitedUrl, metodo di VisitedURLDAOPostgres, che avendo un url visitato e un utente, aggiorna la tabella visitedurls con i dati di iduser, url, query, expandedquery, date. \
A me interessa che quando un utente visita un url, i tag dell'url visitato vengano salvati nella tabella Tagtfidf, che contiene per ogni tag gli url che ha annotato nella storia. L'estrazione dei tag da un url avviene solo quando il profilo utente \'e9 aggiornato, quindi il popolamento della tabella Tagtfidf avviene DOPO l'estrazione dei tag per ogni url. \
1 - estraggo tag dall'url che ho visitato\
2 - salvo i tag nella tabella Tagtfidf e in un'altra TagCooccurrencies, che rappresenta i tag come cooccorrenze. \
3 - successivamente, ogni tanto, faccio il clustering dei Tagtfidf che ho trovato e salvo i risultati in un'altra tabella che verr\'e1 usata per tutti i calcoli fino al nuovo aggiornamento del Profilo Globale, quello che contiene tutti i Tagtfidf di tutti gli utenti. Il clustering dei TagCooccurrencies come si pu\'f3 fare? con lo stesso algoritmo?\
\
Tabella Tagtfidf %%%%%%%\
Nella tabella Tagtfidf deve essere facile creare un oggetto Tagtfidf, che \'e9 fatto dal tag e dalle frequenze con cui \'e9 usato con i diversi url. \
tag - url1 - url2- --- urlN\
design 12 34 56 39 55 9 1 3\
\
%%% meglio! \
id design url1 freq\
id design url2 freq\
id google url1 freq\
id gmail url3 freq\
\
%%% SQL\
CREATE TABLE visitedurltags\
(\
  id serial NOT NULL,\
  idvisitedurl integer NOT NULL,\
  idtag integer NOT NULL,\
  "value" real NOT NULL,\
  CONSTRAINT visitedurltags_pkey PRIMARY KEY (id),\
  CONSTRAINT visitedurltags_idtags_fkey FOREIGN KEY (idtag)\
      REFERENCES tags (id) MATCH SIMPLE\
      ON UPDATE NO ACTION ON DELETE CASCADE,\
  CONSTRAINT visitedurltags_idvisitedurl_fkey FOREIGN KEY (idvisitedurl)\
      REFERENCES visitedurls (id) MATCH SIMPLE\
      ON UPDATE NO ACTION ON DELETE NO ACTION,\
  CONSTRAINT tag_visitedurl_unique UNIQUE (idvisitedurl, idtag)\
)\
WITH (OIDS=FALSE);\
ALTER TABLE visitedurltags OWNER TO web81_nereau;R TABLE tagvisitedurls OWNER TO web81_nereau;\
\
%%%\
\
(id idTagX idUrlN freq)\
\
devo ancora modificare le chiavi: \
idtag + idurl deve essere super chiave - unique: se una delle due \'e9 diversa, stiamo parlando di un'altra tupla. \
non posso avere\
1 2 3 5\
2 2 3 8\
perch\'e9 2 e 3 si riferiscono allo stesso tag e allo stesso url. \
ho messo CONSTRAINT tag_visitedurl_unique UNIQUE (idvisitedurl, idtag) \
\
poi nell'inserimento di un nuovo valore, uso questa tecnica tipo UPSERT scritta qui, di postgres\
\pard\pardeftab720\ql\qnatural

\f1\fs26 \cf0 http://www.postgresql.org/docs/8.3/static/sql-update.html
\f0\fs24 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural
\cf0 \
\
\pard\pardeftab720\ql\qnatural

\f1\fs26 \cf0 quindi, per ottenere tutti i Tagtfidf del sistema\
faccio un select unique tagvalue e poi faccio una query per ogni valore ottenuto, costruendo un oggetto per ogni valore. \
\
In qualche modo nel db dovr\'f3 aggiornare la tabella Tagtfidf ogni volta che un utente visita un sito, mettendoci dentro i tag che sono stati usati per quell'url. Perci\'f3 vorrei conoscere i tag associati ad ogni url visitato con un click dall'utente. \
L'insieme dei tagtfidf rappresenta quindi un GlobalProfile che \'e9 aggiornato ogni volta che un utente clicca su un sito. Si aggiorna aggiungendo un'occorrenza a tutti i tag che annotano l'url cliccato.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 %%%%%%%%%%%%%%%%% OBSOLETO
\f0\fs24 \
salvataggio dei clusters in una tabella clusters\
(\
id_cluster, \
id_tag (pu\'f3 essere null per i cluster),\
similarity_value,  \
id_cluster_father (pu\'f3 essere null per la radice)\
)\
\
%%%% codice sql\
-- Table: clusters\
\
-- DROP TABLE clusters;\
\
CREATE TABLE clusters\
(\
  id serial NOT NULL,\
  idtag integer NOT NULL,\
  similarity real,\
  idfather integer,\
  CONSTRAINT id_primarykey PRIMARY KEY (id),\
  CONSTRAINT clusterfather FOREIGN KEY (idfather)\
      REFERENCES clusters (id) MATCH SIMPLE\
      ON UPDATE NO ACTION ON DELETE NO ACTION,\
  CONSTRAINT idtag_foreignkey FOREIGN KEY (idtag)\
      REFERENCES tags (id) MATCH SIMPLE\
      ON UPDATE NO ACTION ON DELETE NO ACTION\
)\
WITH (OIDS=FALSE);\
ALTER TABLE clusters OWNER TO web81_nereau;\
%%%\
\
\
%%%NUOVA TABELLA clusters_sets con rappresentazione con nested sets\
- Table: clusters_sets\
\
-- DROP TABLE clusters_sets;\
\
CREATE TABLE clusters_sets\
(\
  id serial NOT NULL,\
  idtag integer,\
  "left" integer NOT NULL,\
  "right" integer NOT NULL,\
  similarity real,\
  CONSTRAINT pkey PRIMARY KEY (id),\
  CONSTRAINT clusters_sets_left_key UNIQUE ("left"),\
  CONSTRAINT clusters_sets_right_key UNIQUE ("right")\
)\
WITH (OIDS=FALSE);\
ALTER TABLE clusters_sets OWNER TO web81_nereau;\
\
%%%\
\
\
\
\
\
\
%%%%%%%%%%%%%%%%%
\f1\fs26 \
\pard\pardeftab720\ql\qnatural
\cf0 devo salvare i cluster nella tabella clusters. la transazione deve essere isolata, deve impedire read di altre transazioni che coinvolgano la stessa tabella. TODO. \
\
\
\
\
\
\
\
\
\
\
\
%%% Tag co-occurrences %%%\
poi servir\'e1 una tabella che permetta di ricostruire una matrice tag-tag con le co-occorrenze di un tag con tutti gli altri. \
tag1: tag2-3 tag8-9 tag22-7\
memorizzo solamente le chiavi cio\'e9 i tag per i quali esiste un valore di co-occorrenza diverso da 0, per risparmiare spazio. \
La tabella per salvare queste informazioni potrebbe essere \
id idtag1 idtag2 value. \
(Il concetto \'e9 molto simile alla mappa che gi\'e1 esiste in nereau. )\
\
\
\
}